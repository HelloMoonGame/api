name: $(BuildID)

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - build/character-api/azure-pipelines.yml
    - deploy/character-db.yaml
    - deploy/character-api.yaml
    - src/CharacterApi/*

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and Publish image
  jobs:
  - job: BuildContainersForPR
    displayName: Build for Pull Request
    condition: ne('${{ variables['Build.SourceBranchName'] }}', 'main')
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Cache@2
      inputs:
        key: 'docker | cache'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: DOCKER_CACHE_HIT
      displayName: Cache Docker images
    - script: |
        docker load -i $(Pipeline.Workspace)/docker/cache.tar
      displayName: Restore Docker image
      condition: and(not(canceled()), eq(variables.DOCKER_CACHE_HIT, 'true'))
    - task: Docker@2
      displayName: Build an image
      inputs:
        repository: 'hellomoon/character-api'
        command: build
        dockerfile: '$(Build.SourcesDirectory)/src/CharacterApi/Dockerfile'
        tags: |
          cache-build
        arguments: >-
          --target build
          --build-arg SONAR_TOKEN=$(SONAR_TOKEN)
          --build-arg BRANCH=$(Build.SourceBranchName) 
          --build-arg PR_BRANCH=$(System.PullRequest.SourceBranch)
          --build-arg TARGET_BRANCH=$(System.PullRequest.TargetBranch)
          --build-arg PR_ID=$(System.PullRequest.PullRequestNumber)
        addPipelineData: false
    - task: Docker@2
      displayName: Build an image (publish)
      inputs:
        repository: 'hellomoon/character-api'
        command: build
        dockerfile: '$(Build.SourcesDirectory)/src/CharacterApi/Dockerfile'
        tags: |
          cache-publish
        arguments: >-
          --target publish
          --build-arg SONAR_TOKEN=$(SONAR_TOKEN)
          --build-arg BRANCH=$(Build.SourceBranchName) 
          --build-arg PR_BRANCH=$(System.PullRequest.SourceBranch)
          --build-arg TARGET_BRANCH=$(System.PullRequest.TargetBranch)
          --build-arg PR_ID=$(System.PullRequest.PullRequestNumber)
    - task: Docker@2
      displayName: Build an image (final)
      inputs:
        repository: 'hellomoon/character-api'
        command: build
        dockerfile: '$(Build.SourcesDirectory)/src/CharacterApi/Dockerfile'
        tags: |
          $(tag)
          cache-final
        arguments: >-
          --target final
          --build-arg SONAR_TOKEN=$(SONAR_TOKEN)
          --build-arg BRANCH=$(Build.SourceBranchName) 
          --build-arg PR_BRANCH=$(System.PullRequest.SourceBranch)
          --build-arg TARGET_BRANCH=$(System.PullRequest.TargetBranch)
          --build-arg PR_ID=$(System.PullRequest.PullRequestNumber)
        addPipelineData: false
    - script: |
        mkdir -p $(Pipeline.Workspace)/docker
        docker save -o $(Pipeline.Workspace)/docker/cache.tar hellomoon/character-api:cache-build
      displayName: Save Docker image
    - task: Docker@2
      displayName: Publish an image
      inputs:
        containerRegistry: 'dockerHub'
        repository: 'hellomoon/character-api'
        command: 'push'
        tags: |
          $(tag)
        addPipelineData: false
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/deploy'
        Contents: |
          character-db.yaml
          character-api.yaml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sed -i "s/image: hellomoon\/character-api/image: hellomoon\/character-api:$(tag)/g" character-api.yaml'
        workingDirectory: '$(Build.ArtifactStagingDirectory)/deploy'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy'
        artifactName: k8s
  - job: Build
    displayName: Build for Main
    condition: eq('${{ variables['Build.SourceBranchName'] }}', 'main')
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        repository: 'hellomoon/character-api'
        command: build
        dockerfile: '$(Build.SourcesDirectory)/src/CharacterApi/Dockerfile'
        tags: |
          $(tag)
          latest
        arguments: >-
          --build-arg SONAR_TOKEN=$(SONAR_TOKEN)
          --build-arg BRANCH=$(Build.SourceBranchName)
        addPipelineData: false
    - task: Docker@2
      displayName: Publish an image
      inputs:
        containerRegistry: 'dockerHub'
        repository: 'hellomoon/character-api'
        command: 'push'
        tags: |
          $(tag)
          latest
        addPipelineData: false
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/deploy'
        Contents: |
          character-db.yaml
          character-api.yaml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sed -i "s/image: hellomoon\/character-api/image: hellomoon\/character-api:$(tag)/g" character-api.yaml'
        workingDirectory: '$(Build.ArtifactStagingDirectory)/deploy'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy'
        artifactName: k8s